name: CI

on:
  push:
    branches: [ main, develop, pipeline_v3 ]
  pull_request:
    branches: [ main, develop, pipeline_v3 ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.10', '3.11']
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libcairo2-dev pkg-config python3-dev
    
    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          mingw-w64-x86_64-cairo
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-python-pip
    
    - name: Add MSYS2 to PATH (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    
    - name: Configure AWS Credentials
      if: env.AWS_ACCESS_KEY_ID
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv
        uv venv
        uv pip install -e ".[dev]"
        pip install boto3 requests  # For test file downloads
        
    - name: Run tests
      env:
        # Test file locations (in order of preference)
        TEST_EEG_S3_URL: ${{ secrets.TEST_EEG_S3_URL }}
        TEST_EEG_HTTP_URL: ${{ secrets.TEST_EEG_HTTP_URL }}
      run: |
        pytest tests/ --cov=autoclean --cov-report=term-missing:skip-covered
        
    - name: Generate HTML coverage report
      run: |
        pytest tests/ --cov=autoclean --cov-report=html
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          .coverage
          htmlcov/
          test-results/
        retention-days: 30

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy ruff
        
    - name: Check formatting (black)
      run: black --check src tests
        
    - name: Check imports (isort)
      run: isort --check-only src tests
        
    - name: Lint (ruff)
      run: ruff check src tests

  build:
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: python -m build
        
    - name: Check package
      run: twine check dist/* 