name: CI/CD Monitoring and Alerts

on:
  workflow_run:
    workflows: 
      - "Continuous Integration"
      - "Performance Monitoring"
      - "Docker Build and Publish"
      - "Real Data Testing"
    types: [completed]
  schedule:
    # Daily health check at 9 AM UTC
    - cron: '0 9 * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of health check'
        required: true
        default: 'full'
        type: choice
        options:
          - quick
          - full
          - performance
          - security

permissions:
  contents: read
  actions: read
  issues: write

jobs:
  workflow-status-check:
    name: Workflow Status Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run'
    
    steps:
      - name: Check workflow status
        run: |
          WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
          WORKFLOW_STATUS="${{ github.event.workflow_run.conclusion }}"
          WORKFLOW_URL="${{ github.event.workflow_run.html_url }}"
          
          echo "🔍 Monitoring workflow: $WORKFLOW_NAME"
          echo "📊 Status: $WORKFLOW_STATUS"
          echo "🔗 URL: $WORKFLOW_URL"
          
          # Alert on failures
          if [[ "$WORKFLOW_STATUS" == "failure" ]]; then
            echo "❌ Workflow failed: $WORKFLOW_NAME"
            
            # Create issue for critical workflow failures
            if [[ "$WORKFLOW_NAME" == "Continuous Integration" ]] || [[ "$WORKFLOW_NAME" == "Docker Build and Publish" ]]; then
              echo "🚨 Critical workflow failure detected"
              echo "create_issue=true" >> $GITHUB_ENV
              echo "issue_title=Critical CI Failure: $WORKFLOW_NAME" >> $GITHUB_ENV
              echo "issue_body=The critical workflow '$WORKFLOW_NAME' has failed. Please investigate immediately.\n\nWorkflow URL: $WORKFLOW_URL" >> $GITHUB_ENV
            fi
          elif [[ "$WORKFLOW_STATUS" == "success" ]]; then
            echo "✅ Workflow completed successfully: $WORKFLOW_NAME"
          else
            echo "⚠️ Workflow completed with status: $WORKFLOW_STATUS"
          fi

      - name: Create failure issue
        if: env.create_issue == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const title = process.env.issue_title;
            const body = process.env.issue_body;
            
            // Check if similar issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'ci-failure'
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes(title.split(':')[1])
            );
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['ci-failure', 'urgent']
              });
              console.log('🚨 Created failure issue');
            } else {
              console.log('📝 Similar issue already exists');
            }

  health-check:
    name: CI/CD Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dotenv

      - name: Check repository health
        run: |
          python -c "
          import requests
          import json
          import sys
          from datetime import datetime, timedelta
          
          # GitHub API headers
          headers = {
              'Authorization': 'token ${{ secrets.GITHUB_TOKEN }}',
              'Accept': 'application/vnd.github.v3+json'
          }
          
          repo = '${{ github.repository }}'
          base_url = f'https://api.github.com/repos/{repo}'
          
          print('🏥 CI/CD Health Check Report')
          print('=' * 40)
          
          # Check recent workflow runs
          workflows_url = f'{base_url}/actions/runs'
          response = requests.get(workflows_url, headers=headers)
          
          if response.status_code == 200:
              runs = response.json()['workflow_runs']
              
              # Analyze last 20 runs
              recent_runs = runs[:20]
              success_count = sum(1 for run in recent_runs if run['conclusion'] == 'success')
              failure_count = sum(1 for run in recent_runs if run['conclusion'] == 'failure')
              
              success_rate = (success_count / len(recent_runs)) * 100
              
              print(f'📊 Recent Workflow Runs (last 20):')
              print(f'  ✅ Success: {success_count}')
              print(f'  ❌ Failure: {failure_count}')
              print(f'  📈 Success Rate: {success_rate:.1f}%')
              
              # Health status
              if success_rate >= 80:
                  print('🟢 CI/CD Health: GOOD')
                  health_status = 'good'
              elif success_rate >= 60:
                  print('🟡 CI/CD Health: WARNING')
                  health_status = 'warning'
              else:
                  print('🔴 CI/CD Health: CRITICAL')
                  health_status = 'critical'
              
              # Save health status
              with open('health_status.txt', 'w') as f:
                  f.write(f'{health_status},{success_rate:.1f}')
              
          else:
              print(f'❌ Failed to fetch workflow data: {response.status_code}')
              sys.exit(1)
          
          # Check open issues
          issues_url = f'{base_url}/issues'
          response = requests.get(issues_url, headers=headers, params={'state': 'open', 'labels': 'ci-failure'})
          
          if response.status_code == 200:
              ci_issues = response.json()
              print(f'\\n🐛 Open CI Issues: {len(ci_issues)}')
              
              if ci_issues:
                  for issue in ci_issues[:5]:
                      print(f'  - #{issue[\"number\"]}: {issue[\"title\"]}')
          
          # Check dependency security alerts
          # (This would require additional permissions)
          print('\\n🔒 Security Status: Monitoring enabled')
          
          print('\\n✅ Health check completed')
          "

      - name: Performance trend analysis
        if: github.event.inputs.check_type == 'performance' || github.event.inputs.check_type == 'full'
        run: |
          echo "📈 Analyzing performance trends..."
          
          python -c "
          import requests
          import json
          from datetime import datetime, timedelta
          
          headers = {
              'Authorization': 'token ${{ secrets.GITHUB_TOKEN }}',
              'Accept': 'application/vnd.github.v3+json'
          }
          
          repo = '${{ github.repository }}'
          
          # Check for performance artifacts from recent runs
          artifacts_url = f'https://api.github.com/repos/{repo}/actions/artifacts'
          response = requests.get(artifacts_url, headers=headers)
          
          if response.status_code == 200:
              artifacts = response.json()['artifacts']
              perf_artifacts = [a for a in artifacts if 'performance' in a['name'].lower()]
              
              print(f'🎯 Found {len(perf_artifacts)} performance artifacts')
              
              if len(perf_artifacts) >= 2:
                  print('📊 Performance trend data available')
              else:
                  print('⚠️ Insufficient performance data for trend analysis')
          else:
              print('❌ Could not fetch performance data')
          "

      - name: Generate health report
        run: |
          # Read health status
          if [ -f "health_status.txt" ]; then
            IFS=',' read -r status rate < health_status.txt
            
            echo "📋 CI/CD Health Report - $(date)" > health_report.md
            echo "=================================" >> health_report.md
            echo "" >> health_report.md
            echo "**Overall Status:** $status" >> health_report.md
            echo "**Success Rate:** $rate%" >> health_report.md
            echo "" >> health_report.md
            echo "Generated by automated health check" >> health_report.md
            
            echo "✅ Health report generated"
          fi

      - name: Upload health report
        uses: actions/upload-artifact@v4
        with:
          name: ci-health-report-${{ github.run_id }}
          path: health_report.md
          retention-days: 30

      - name: Create health status issue
        if: github.event_name == 'schedule'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            if (fs.existsSync('health_status.txt')) {
              const healthData = fs.readFileSync('health_status.txt', 'utf8');
              const [status, rate] = healthData.trim().split(',');
              
              if (status === 'critical' || status === 'warning') {
                const title = `CI/CD Health Alert: ${status.toUpperCase()}`;
                const body = `
            **CI/CD Health Status: ${status.toUpperCase()}**
            
            Current success rate: ${rate}%
            
            ${status === 'critical' ? 
              '🚨 **CRITICAL**: CI/CD pipeline success rate is below 60%. Immediate attention required.' :
              '⚠️ **WARNING**: CI/CD pipeline success rate is below 80%. Monitor closely.'
            }
            
            Please investigate recent workflow failures and address any systemic issues.
            
            Generated by automated health monitoring.
                `;
                
                // Check for existing health alerts
                const issues = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open',
                  labels: 'health-alert'
                });
                
                const existingAlert = issues.data.find(issue => 
                  issue.title.includes('CI/CD Health Alert')
                );
                
                if (!existingAlert) {
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: title,
                    body: body,
                    labels: ['health-alert', status === 'critical' ? 'urgent' : 'monitoring']
                  });
                  console.log('🚨 Created health alert issue');
                } else {
                  console.log('📝 Health alert already exists');
                }
              }
            }

  dependency-check:
    name: Dependency Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.check_type == 'security' || github.event.inputs.check_type == 'full'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Check for outdated dependencies
        run: |
          pip install pip-audit pip-check-reqs
          
          echo "🔍 Checking for security vulnerabilities..."
          pip-audit --desc --format=json --output=security_audit.json || true
          
          echo "📦 Checking for outdated dependencies..."
          pip list --outdated --format=json > outdated_deps.json || true
          
          python -c "
          import json
          import sys
          
          # Check security audit
          try:
              with open('security_audit.json', 'r') as f:
                  audit_data = json.load(f)
              
              vulnerabilities = audit_data.get('vulnerabilities', [])
              print(f'🔒 Security vulnerabilities found: {len(vulnerabilities)}')
              
              if vulnerabilities:
                  print('⚠️ Critical vulnerabilities detected:')
                  for vuln in vulnerabilities[:5]:
                      print(f\"  - {vuln.get('package', 'unknown')}: {vuln.get('id', 'unknown')}\")
          except (FileNotFoundError, json.JSONDecodeError):
              print('📝 No security audit data available')
          
          # Check outdated dependencies
          try:
              with open('outdated_deps.json', 'r') as f:
                  outdated = json.load(f)
              
              print(f'\\n📈 Outdated dependencies: {len(outdated)}')
              
              if outdated:
                  print('📦 Major version updates available:')
                  for dep in outdated[:5]:
                      current = dep.get('version', 'unknown')
                      latest = dep.get('latest_version', 'unknown')
                      print(f\"  - {dep.get('name', 'unknown')}: {current} -> {latest}\")
          except (FileNotFoundError, json.JSONDecodeError):
              print('📝 No dependency data available')
          "

      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports-${{ github.run_id }}
          path: |
            security_audit.json
            outdated_deps.json
          retention-days: 30

  notification-summary:
    name: Notification Summary
    runs-on: ubuntu-latest
    needs: [workflow-status-check, health-check, dependency-check]
    if: always()
    
    steps:
      - name: Monitoring summary
        run: |
          echo "📊 CI/CD Monitoring Summary"
          echo "=========================="
          echo "Workflow Status Check: ${{ needs.workflow-status-check.result || 'skipped' }}"
          echo "Health Check: ${{ needs.health-check.result || 'skipped' }}"
          echo "Dependency Check: ${{ needs.dependency-check.result || 'skipped' }}"
          echo ""
          echo "Monitoring completed at: $(date)"
          
          # You can add additional notification logic here
          # (Slack, email, etc.)